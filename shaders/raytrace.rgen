#version 460 core

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable
#extension GL_GOOGLE_include_directive : require

layout(push_constant) uniform ScreenDim {
	vec4 worldOffset;
	vec4 worldDirection;
	vec4 worldRight;
	vec4 worldUp;
	float aspectRatio;
	float tanHalfFoV;
	float time;
	float exposure;
	uint accumulatedSampleCount;
};

layout(set = 1, binding = 0) uniform accelerationStructureEXT tlasStructure;
layout(rgba32f, set = 0, binding = 0) restrict uniform image2D accumulationImage;
layout(rgba8, set = 0, binding = 1) uniform image2D outputImage;

 #include "raytrace-common.glsl"

layout(location = 0) rayPayloadEXT RayPayload payload;

void nextRand(inout uint randomState) {
	randomState = randomState * 246049789 % 268435399;
	uint c = randomState & 0xE0000000 >> 29;
	randomState = ((((randomState ^ randomState >> c)) ^ (c << 32 - c)) * 104122896) ^ (c << 7);
}

const uint nSamples = 1;

void main() {
	vec4 prevAccumulatedRadiance = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy));

	if(accumulatedSampleCount == -1U) {
		prevAccumulatedRadiance = vec4(1.0f) - exp(-prevAccumulatedRadiance * exposure);
		prevAccumulatedRadiance = pow(prevAccumulatedRadiance, 1.0f / 2.2f.xxxx);
		imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), prevAccumulatedRadiance);
		return;
	}

	uint randomSeed = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + floatBitsToUint(time);
	nextRand(randomSeed);
	
	//stratified sampling for the two image dimensions
	vec2 pixelJitter;
	pixelJitter.x = randomSeed * uintBitsToFloat(0x2f800004U);
	nextRand(randomSeed);
	pixelJitter.y = randomSeed * uintBitsToFloat(0x2f800004U);
	pixelJitter -= 0.5f; //pixelJitter is in [-0.5;0.5]

	vec2 point = (vec2(gl_LaunchIDEXT.xy + pixelJitter) / vec2(gl_LaunchSizeEXT.xy)) - 0.5f;

	vec3 frustumLL = worldDirection.xyz - worldUp.xyz * tanHalfFoV - worldRight.xyz * tanHalfFoV * aspectRatio;
	vec3 frustumLR = worldDirection.xyz - worldUp.xyz * tanHalfFoV + worldRight.xyz * tanHalfFoV * aspectRatio;
	vec3 frustumTL = worldDirection.xyz + worldUp.xyz * tanHalfFoV - worldRight.xyz * tanHalfFoV * aspectRatio;

	vec3 projected = worldDirection.xyz + point.x * (frustumLR - frustumLL) + point.y * (frustumTL - frustumLL);

	vec4 accumulatedRadiance = vec4(0.0f);
	for(uint i = 0; i < nSamples; ++i) {
		payload.randomState = randomSeed;
		payload.rayThroughput = 1.0f;
		payload.isLightSample = false;
		payload.color = vec4(0.0f);
		payload.recursionDepth = 0;

		traceRayEXT(tlasStructure, gl_RayFlagsNoneEXT, 0xFE, 0, 0, 0, worldOffset.xyz, 0.0, normalize(projected), 999999999.0f, 0);
		accumulatedRadiance += payload.color / nSamples;
	}

	if(accumulatedSampleCount > 1)
		accumulatedRadiance = prevAccumulatedRadiance * (1 - 1.0f / accumulatedSampleCount) + accumulatedRadiance * (1.0f / accumulatedSampleCount);

	if(any(isnan(accumulatedRadiance))) {
		accumulatedRadiance = vec4(1.0f, 0.0f, 0.0f ,1.0f);
	}
	
	imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), accumulatedRadiance);

	accumulatedRadiance = vec4(1.0f) - exp(-accumulatedRadiance * exposure);
	accumulatedRadiance = pow(accumulatedRadiance, 1.0f / 2.2f.xxxx);
	imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), accumulatedRadiance);
}